name: Run Tests
on: [ push, workflow_dispatch ]
jobs:
  phpunit:
    runs-on: ubuntu-latest
    env:
      MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
      MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
      TEST_DB_DATABASE: ${{ secrets.TEST_DB_DATABASE }}
      TEST_DB_HOST: 3306
      TEST_DB_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
      TEST_DB_PORT: ${{ secrets.TEST_DB_PORT }}
      TEST_DB_USERNAME: ${{ secrets.TEST_DB_USERNAME }}
      ADMIN_NAME: ${{ secrets.ADMIN_NAME }}
      ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
      ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
      ADMIN_AVATAR: ${{ secrets.ADMIN_AVATAR }}
    # services:
    #   mysql:
    #     image: mysql:8.0
    #     ports:
    #       - 3307:3306
    #     env:
    #       MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
    #       MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
    #     options: --name mysql
    # defaults:
    #   run:
    #     working-directory: ./backend/src
    steps:
      - name: Setup MySQL
        run: |
          sudo systemctl start mysql.service
          mysql --user=root --password=root -e "CREATE DATABASE $TEST_DB_DATABASE;"
          mysql --user=root --password=root -e "CREATE USER '$TEST_DB_USERNAME'@'$TEST_DB_HOST' IDENTIFIED WITH mysql_native_password BY '$TEST_DB_PASSWORD';"
          mysql --user=root --password=root -e "GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, INDEX, DROP, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES ON $TEST_DB_DATABASE.* TO '$TEST_DB_USERNAME'@'$TEST_DB_HOST';"
          # GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, INDEX, DROP, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES ON $TEST_DB_DATABASE.* TO '$TEST_DB_USERNAME'@'$TEST_DB_HOST';
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: ./backend/src/vendor
          key: composer-deps-${{ hashFiles('./backend/src/composer.lock') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: composer install
      - name: Create dummy .env
        working-directory: ./backend/src
        run: echo "APP_KEY=" > .env
      - name: Generate dummy APP_KEY
        working-directory: ./backend/src
        run: php artisan key:generate
      # - name: Wait for MySQL
      #   run: |
      #     while ! docker exec mysql mysql --user=root --password=$MYSQL_ROOT_PASSWORD -e "status" &> /dev/null ; do
      #       echo "Waiting for database connection..."
      #       sleep 2
      #     done
      - name: Run PHPUnit
        working-directory: ./backend/src
        run: php artisan test
  jest:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: ./frontend/node_modules
          key: nextjs-deps-${{ hashFiles('./frontend/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Run Jest
        run: npx jest --all
